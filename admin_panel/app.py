"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ Streamlit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–æ–ª–≥–æ–≤
"""
import streamlit as st
import pandas as pd
import os
import sys
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.db import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="LunchBOT - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return DatabaseManager()

def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if not dt_string:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return dt_string

def format_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_map = {
        'Open': 'üî¥ –û—Ç–∫—Ä—ã—Ç',
        'Closed': '‚úÖ –ó–∞–∫—Ä—ã—Ç',
        'Disputed': '‚ö†Ô∏è –°–ø–æ—Ä–Ω—ã–π',
        'Pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
        'Confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    }
    return status_map.get(status, status)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    st.title("üçΩÔ∏è LunchBOT - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    st.markdown("---")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = get_db()
    
    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    pages = {
        "–û–±–∑–æ—Ä": "overview",
        "–î–æ–ª–≥–∏": "debts",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "users",
        "–°—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏": "activation_links",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": "settings"
    }
    
    selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", list(pages.keys()))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if selected_page == "–û–±–∑–æ—Ä":
        show_overview(db)
    elif selected_page == "–î–æ–ª–≥–∏":
        show_debts(db)
    elif selected_page == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users(db)
    elif selected_page == "–°—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏":
        show_activation_links(db)
    elif selected_page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings(db)

def show_overview(db: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users = db.get_all_users()
    debts = db.get_open_debts()
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", len(users))
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", len(debts))
    
    with col3:
        total_amount = sum(debt['amount'] for debt in debts)
        st.metric("–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤", f"{total_amount:.2f} —Ä—É–±.")
    
    with col4:
        avg_amount = total_amount / len(debts) if debts else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π –¥–æ–ª–≥", f"{avg_amount:.2f} —Ä—É–±.")
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–ª–≥–æ–≤
    st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–ª–≥–∏")
    
    if debts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        debts_df = pd.DataFrame(debts)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        display_columns = [
            'debtor_name', 'creditor_name', 'amount', 
            'description', 'created_at', 'status'
        ]
        
        if all(col in debts_df.columns for col in display_columns):
            debts_display = debts_df[display_columns].copy()
            debts_display.columns = [
                '–î–æ–ª–∂–Ω–∏–∫', '–ö—Ä–µ–¥–∏—Ç–æ—Ä', '–°—É–º–º–∞', 
                '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'
            ]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            debts_display['–°—É–º–º–∞'] = debts_display['–°—É–º–º–∞'].apply(lambda x: f"{x:.2f} —Ä—É–±.")
            debts_display['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = debts_display['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].apply(format_datetime)
            debts_display['–°—Ç–∞—Ç—É—Å'] = debts_display['–°—Ç–∞—Ç—É—Å'].apply(format_status)
            
            st.dataframe(debts_display, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")

def show_debts(db: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏"""
    st.header("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", "–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–≥"])
    
    with tab1:
        st.subheader("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏")
        
        debts = db.get_open_debts()
        
        if debts:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É
                debtors = list(set(debt['debtor_name'] for debt in debts))
                selected_debtor = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É", 
                    ["–í—Å–µ"] + debtors,
                    key="debtor_filter"
                )
            
            with col2:
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É
                creditors = list(set(debt['creditor_name'] for debt in debts))
                selected_creditor = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É", 
                    ["–í—Å–µ"] + creditors,
                    key="creditor_filter"
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_debts = debts
            if selected_debtor != "–í—Å–µ":
                filtered_debts = [d for d in filtered_debts if d['debtor_name'] == selected_debtor]
            if selected_creditor != "–í—Å–µ":
                filtered_debts = [d for d in filtered_debts if d['creditor_name'] == selected_creditor]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ª–≥–∏
            for debt in filtered_debts:
                with st.expander(f"üí∞ {debt['debtor_name']} ‚Üí {debt['creditor_name']}: {debt['amount']} —Ä—É–±."):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–î–æ–ª–∂–Ω–∏–∫:** {debt['debtor_name']}")
                        st.write(f"**–ö—Ä–µ–¥–∏—Ç–æ—Ä:** {debt['creditor_name']}")
                        st.write(f"**–°—É–º–º–∞:** {debt['amount']} —Ä—É–±.")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {debt['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                    
                    with col2:
                        st.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {format_datetime(debt['created_at'])}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {format_status(debt['status'])}")
                        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** {format_datetime(debt['last_reminder'])}")
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        if st.button(f"–ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥", key=f"close_{debt['id']}"):
                            if db.close_debt(debt['id']):
                                st.success("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç!")
                                st.rerun()
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–ª–≥–∞")
                    
                    with col_btn2:
                        if st.button(f"–û—Å–ø–æ—Ä–∏—Ç—å –¥–æ–ª–≥", key=f"dispute_{debt['id']}"):
                            if db.dispute_debt(debt['id']):
                                st.success("–î–æ–ª–≥ –æ—Å–ø–æ—Ä–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–∏ –¥–æ–ª–≥–∞")
        else:
            st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")
    
    with tab2:
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥")
        
        users = db.get_all_users()
        
        if len(users) >= 2:
            # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞
            with st.form("create_debt_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    # –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–∏–∫–∞
                    debtor_options = {f"{user['first_name']} (@{user['username']})": user['user_id'] 
                                    for user in users}
                    selected_debtor = st.selectbox("–î–æ–ª–∂–Ω–∏–∫", list(debtor_options.keys()))
                    debtor_id = debtor_options[selected_debtor]
                    
                    # –°—É–º–º–∞
                    amount = st.number_input("–°—É–º–º–∞ –¥–æ–ª–≥–∞", min_value=0.01, value=100.0, step=0.01)
                
                with col2:
                    # –í—ã–±–æ—Ä –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
                    creditor_options = {f"{user['first_name']} (@{user['username']})": user['user_id'] 
                                      for user in users if user['user_id'] != debtor_id}
                    selected_creditor = st.selectbox("–ö—Ä–µ–¥–∏—Ç–æ—Ä", list(creditor_options.keys()))
                    creditor_id = creditor_options[selected_creditor]
                    
                    # –û–ø–∏—Å–∞–Ω–∏–µ
                    description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                
                # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–≥"):
                    if debtor_id == creditor_id:
                        st.error("–î–æ–ª–∂–Ω–∏–∫ –∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º!")
                    else:
                        debt_id = db.create_debt(debtor_id, creditor_id, amount, description)
                        if debt_id:
                            st.success(f"–î–æ–ª–≥ —Å–æ–∑–¥–∞–Ω! ID: {debt_id}")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–≥–∞")
        else:
            st.warning("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def show_users(db: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    users = db.get_all_users()
    
    if users:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º
            debts = db.get_open_debts()
            debtor_stats = {}
            
            for debt in debts:
                debtor_name = debt['debtor_name']
                if debtor_name not in debtor_stats:
                    debtor_stats[debtor_name] = {'count': 0, 'amount': 0}
                debtor_stats[debtor_name]['count'] += 1
                debtor_stats[debtor_name]['amount'] += debt['amount']
            
            if debtor_stats:
                for debtor, stats in debtor_stats.items():
                    st.write(f"**{debtor}**: {stats['count']} –¥–æ–ª–≥–æ–≤ –Ω–∞ —Å—É–º–º—É {stats['amount']:.2f} —Ä—É–±.")
            else:
                st.info("–ù–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º
            creditor_stats = {}
            
            for debt in debts:
                creditor_name = debt['creditor_name']
                if creditor_name not in creditor_stats:
                    creditor_stats[creditor_name] = {'count': 0, 'amount': 0}
                creditor_stats[creditor_name]['count'] += 1
                creditor_stats[creditor_name]['amount'] += debt['amount']
            
            if creditor_stats:
                for creditor, stats in creditor_stats.items():
                    st.write(f"**{creditor}**: {stats['count']} –¥–æ–ª–≥–æ–≤ –Ω–∞ —Å—É–º–º—É {stats['amount']:.2f} —Ä—É–±.")
            else:
                st.info("–ù–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        users_df = pd.DataFrame(users)
        display_columns = ['first_name', 'username', 'user_id', 'is_active', 'created_at', 'activated_at']
        
        if all(col in users_df.columns for col in display_columns):
            users_display = users_df[display_columns].copy()
            users_display.columns = [
                '–ò–º—è', 'Username', 'User ID', '–ê–∫—Ç–∏–≤–µ–Ω', '–°–æ–∑–¥–∞–Ω', '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            ]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            users_display['–ê–∫—Ç–∏–≤–µ–Ω'] = users_display['–ê–∫—Ç–∏–≤–µ–Ω'].apply(lambda x: '‚úÖ' if x else '‚ùå')
            users_display['–°–æ–∑–¥–∞–Ω'] = users_display['–°–æ–∑–¥–∞–Ω'].apply(format_datetime)
            users_display['–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'] = users_display['–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'].apply(format_datetime)
            
            st.dataframe(users_display, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def show_activation_links(db: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    st.header("üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏", "–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"])
    
    with tab1:
        st.subheader("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
        
        links = db.get_activation_links()
        
        if links:
            for link in links:
                status_icon = "‚úÖ" if link['is_used'] else "üî¥"
                status_text = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞" if link['is_used'] else "–ê–∫—Ç–∏–≤–Ω–∞"
                
                with st.expander(f"{status_icon} {link['name']} - {status_text}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–ò–º—è:** {link['name']}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {status_text}")
                        st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {format_datetime(link['created_at'])}")
                        if link['is_used']:
                            st.write(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞:** {format_datetime(link['used_at'])}")
                            st.write(f"**User ID:** {link['user_id']}")
                    
                    with col2:
                        if not link['is_used']:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                            activation_url = f"https://t.me/@MealLunchBot?start={link['token']}"
                            st.code(activation_url, language="text")
                            st.write("**–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**")
                            st.code(f"/activate {link['token']}", language="text")
                            
                            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                            if st.button(f"–£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", key=f"delete_{link['id']}"):
                                if db.delete_activation_link(link['token']):
                                    st.success("–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
        else:
            st.info("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    
    with tab2:
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É")
        
        with st.form("create_link_form"):
            name = st.text_input("–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"):
                if name.strip():
                    token = db.create_activation_link(name.strip())
                    if token:
                        st.success(f"–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {name}!")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                        activation_url = f"https://t.me/@MealLunchBot?start={token}"
                        st.write("**–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**")
                        st.code(activation_url, language="text")
                        
                        st.write("**–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**")
                        st.code(f"/activate {token}", language="text")
                        
                        st.rerun()
                    else:
                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")

def show_settings(db: DatabaseManager):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    st.subheader("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    current_frequency = int(db.get_setting('reminder_frequency') or 1)
    
    with st.form("reminder_settings"):
        frequency_options = {
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å": 1,
            "–ö–∞–∂–¥—ã–µ 2 –¥–Ω—è": 2,
            "–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è": 3,
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": 7,
            "–ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏": 14
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        current_option = None
        for option, value in frequency_options.items():
            if value == current_frequency:
                current_option = option
                break
        
        if not current_option:
            current_option = f"–ö–∞–∂–¥—ã–µ {current_frequency} –¥–Ω–µ–π"
            frequency_options[current_option] = current_frequency
        
        selected_frequency = st.selectbox(
            "–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–ª–≥–∞—Ö",
            list(frequency_options.keys()),
            index=list(frequency_options.keys()).index(current_option)
        )
        
        if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            new_frequency = frequency_options[selected_frequency]
            if db.set_setting('reminder_frequency', str(new_frequency)):
                st.success(f"–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_frequency}")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    st.subheader("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    
    admin_chat_id = db.get_setting('admin_chat_id') or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info(f"**ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:** {admin_chat_id}")
    
    with col2:
        st.info("**–¢–æ–∫–µ–Ω –±–æ—Ç–∞:** –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ .env")
    
    st.warning("‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω ID –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users_count = len(db.get_all_users())
    debts_count = len(db.get_open_debts())
    links_count = len(db.get_activation_links())
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", users_count)
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", debts_count)
    
    with col3:
        st.metric("–°—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", links_count)

if __name__ == "__main__":
    main() 