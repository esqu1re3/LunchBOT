"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–∞ Streamlit –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –¥–æ–ª–≥–æ–≤
"""
import streamlit as st
import pandas as pd
import os
import sys
import asyncio
import requests
import io
from datetime import datetime
from typing import List, Dict, Any
from dotenv import load_dotenv
from st_cookies_manager import EncryptedCookieManager
import pytz
import logging
from PIL import Image

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.async_db import AsyncDatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="LunchBOT - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def get_async_db():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return AsyncDatabaseManager()

def load_telegram_image(file_id: str, bot_token: str):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ file_id"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info_url = f"https://api.telegram.org/bot{bot_token}/getFile?file_id={file_id}"
        response = requests.get(file_info_url)
        if response.status_code != 200:
            return None
        
        file_info = response.json()
        if not file_info.get('ok'):
            return None
        
        file_path = file_info['result']['file_path']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{bot_token}/{file_path}"
        image_response = requests.get(file_url)
        if image_response.status_code != 200:
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
        image = Image.open(io.BytesIO(image_response.content))
        return image
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def get_db_data():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î"""
    db = get_async_db()
    users = await db.get_all_users()
    debts = await db.get_open_debts()
    return users, debts

def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UTC+6 (Asia/Bishkek)"""
    try:
        if not dt_string:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ UTC+6
        tz = pytz.timezone('Asia/Bishkek')
        if dt.tzinfo is None:
            dt = pytz.utc.localize(dt)
        dt = dt.astimezone(tz)
        return dt.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return dt_string

def format_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_map = {
        'Open': 'üî¥ –û—Ç–∫—Ä—ã—Ç',
        'Closed': '‚úÖ –ó–∞–∫—Ä—ã—Ç',
        'Cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω',
        'Pending': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
        'Confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    }
    return status_map.get(status, status)

# === –ü–†–û–°–¢–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û –ü–ê–†–û–õ–Æ –° COOKIE ===
cookies_secret = os.getenv('COOKIES_SECRET', 'default_secret')
cookie_manager = EncryptedCookieManager(prefix="lunchbot_admin_", password=cookies_secret)
cookie_manager.ready()

def check_password():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (cookie-based)"""
    if not cookie_manager.ready():
        st.warning("Cookie manager –Ω–µ –≥–æ—Ç–æ–≤. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        st.stop()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
    if cookie_manager.get("admin_authenticated") == "1":
        st.session_state['admin_authenticated'] = True
        return True
    if 'admin_authenticated' not in st.session_state:
        st.session_state['admin_authenticated'] = False
    if st.session_state['admin_authenticated']:
        cookie_manager["admin_authenticated"] = "1"
        return True
    correct_password = os.getenv('ADMIN_PANEL_PASSWORD')
    st.title('üîí –í—Ö–æ–¥ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
    password = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', type='password')
    if st.button('–í–æ–π—Ç–∏'):
        if password == correct_password and password:
            st.session_state['admin_authenticated'] = True
            cookie_manager["admin_authenticated"] = "1"
            st.success('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!')
            st.experimental_rerun()
        else:
            st.error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!')
    return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not check_password():
        st.stop()
    st.title("üçΩÔ∏è LunchBOT - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    st.markdown("---")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ë–î
    users, debts = await get_db_data()
    
    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    pages = {
        "–û–±–∑–æ—Ä": "overview",
        "–î–æ–ª–≥–∏": "debts",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": "users",
        "QR-–∫–æ–¥—ã": "qr_codes",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": "settings"
    }
    page_names = list(pages.keys())
    # –ü–æ–ª—É—á–∞–µ–º query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    query_params = st.experimental_get_query_params()
    default_page = query_params.get("page", [page_names[0]])[0]
    if default_page not in page_names:
        default_page = page_names[0]
    # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    selected_page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        page_names,
        index=page_names.index(default_page),
        key="page_select"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    st.experimental_set_query_params(page=selected_page)
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if selected_page == "–û–±–∑–æ—Ä":
        await show_overview(users, debts)
    elif selected_page == "–î–æ–ª–≥–∏":
        await show_debts(users, debts)
    elif selected_page == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        await show_users(users, debts)
    elif selected_page == "QR-–∫–æ–¥—ã":
        await show_qr_codes(users)
    elif selected_page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await show_settings()

async def show_overview(users: List[Dict], debts: List[Dict]):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", len(users))
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", len(debts))
    
    with col3:
        total_amount = sum(debt['amount'] for debt in debts)
        st.metric("–û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–æ–≤", f"{total_amount:.2f} —Å–æ–º.")
    
    with col4:
        avg_amount = total_amount / len(debts) if debts else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π –¥–æ–ª–≥", f"{avg_amount:.2f} —Å–æ–º.")
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–ª–≥–æ–≤
    st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–ª–≥–∏")
    
    if debts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        debts_df = pd.DataFrame(debts)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        display_columns = [
            'debtor_name', 'creditor_name', 'amount', 
            'description', 'created_at', 'status'
        ]
        
        if all(col in debts_df.columns for col in display_columns):
            debts_display = debts_df[display_columns].copy()
            debts_display.columns = [
                '–î–æ–ª–∂–Ω–∏–∫', '–ö—Ä–µ–¥–∏—Ç–æ—Ä', '–°—É–º–º–∞', 
                '–û–ø–∏—Å–∞–Ω–∏–µ', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç—É—Å'
            ]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            debts_display['–°—É–º–º–∞'] = debts_display['–°—É–º–º–∞'].apply(lambda x: f"{x:.2f} —Å–æ–º.")
            debts_display['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = debts_display['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'].apply(format_datetime)
            debts_display['–°—Ç–∞—Ç—É—Å'] = debts_display['–°—Ç–∞—Ç—É—Å'].apply(format_status)
            
            st.dataframe(debts_display, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")

async def show_debts(users: List[Dict], debts: List[Dict]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏"""
    st.header("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏")
    
    # –í–∫–ª–∞–¥–∫–∏
    tab1, tab2 = st.tabs(["–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", "–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–≥"])
    
    with tab1:
        st.subheader("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏")
        
        if debts:
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2 = st.columns(2)
            
            with col1:
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É
                debtors = list(set(debt['debtor_name'] for debt in debts))
                selected_debtor = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É", 
                    ["–í—Å–µ"] + debtors,
                    key="debtor_filter"
                )
            
            with col2:
                # –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É
                creditors = list(set(debt['creditor_name'] for debt in debts))
                selected_creditor = st.selectbox(
                    "–§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É", 
                    ["–í—Å–µ"] + creditors,
                    key="creditor_filter"
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_debts = debts
            if selected_debtor != "–í—Å–µ":
                filtered_debts = [d for d in filtered_debts if d['debtor_name'] == selected_debtor]
            if selected_creditor != "–í—Å–µ":
                filtered_debts = [d for d in filtered_debts if d['creditor_name'] == selected_creditor]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ–ª–≥–∏
            for debt in filtered_debts:
                with st.expander(f"üí∞ {debt['debtor_name']} ‚Üí {debt['creditor_name']}: {debt['amount']:.2f} —Å–æ–º."):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**–î–æ–ª–∂–Ω–∏–∫:** {debt['debtor_name']}")
                        st.write(f"**–ö—Ä–µ–¥–∏—Ç–æ—Ä:** {debt['creditor_name']}")
                        st.write(f"**–°—É–º–º–∞:** {debt['amount']:.2f} —Å–æ–º.")
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {debt['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                    
                    with col2:
                        st.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {format_datetime(debt['created_at'])}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {format_status(debt['status'])}")
                        st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:** {format_datetime(debt['last_reminder'])}")
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col_btn1, col_btn2 = st.columns(2)
                    
                    with col_btn1:
                        if st.button(f"–ó–∞–∫—Ä—ã—Ç—å –¥–æ–ª–≥", key=f"close_{debt['id']}"):
                            db = get_async_db()
                            if await db.close_debt(debt['id']):
                                st.success("–î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç!")
                                st.rerun()
                            else:
                                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥–æ–ª–≥–∞")
        else:
            st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")
    
    with tab2:
        st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥")
        
        if len(users) >= 2:
            with st.form("create_debt_form"):
                user_options = {f"{user['first_name']} (@{user['username']})": user['user_id'] for user in users}
                user_names = list(user_options.keys())
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
                if 'selected_debtor' not in st.session_state or st.session_state['selected_debtor'] not in user_names:
                    st.session_state['selected_debtor'] = user_names[0]
                if ('selected_creditor' not in st.session_state or 
                    st.session_state['selected_creditor'] not in user_names):
                    st.session_state['selected_creditor'] = user_names[1] if len(user_names) > 1 else user_names[0]
                col1, col2 = st.columns(2)
                with col1:
                    selected_debtor = st.selectbox(
                        "–î–æ–ª–∂–Ω–∏–∫",
                        user_names,
                        key="debtor_select",
                        index=(user_names.index(st.session_state['selected_debtor']) 
                               if st.session_state['selected_debtor'] in user_names else 0)
                    )
                    st.session_state['selected_debtor'] = selected_debtor
                    debtor_id = user_options[selected_debtor]
                with col2:
                    selected_creditor = st.selectbox(
                        "–ö—Ä–µ–¥–∏—Ç–æ—Ä",
                        user_names,
                        key="creditor_select",
                        index=(user_names.index(st.session_state['selected_creditor']) 
                               if st.session_state['selected_creditor'] in user_names else 0)
                    )
                    st.session_state['selected_creditor'] = selected_creditor
                    creditor_id = user_options[selected_creditor]
                amount = st.number_input("–°—É–º–º–∞ –¥–æ–ª–≥–∞", min_value=0.01, value=100.0, step=0.01)
                description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–≥"):
                    if debtor_id == creditor_id:
                        st.error("–î–æ–ª–∂–Ω–∏–∫ –∏ –∫—Ä–µ–¥–∏—Ç–æ—Ä –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –ª–∏—Ü–æ–º!")
                    else:
                        db = get_async_db()
                        debt_id = await db.create_debt(debtor_id, creditor_id, amount, description)
                        if debt_id:
                            st.success(f"–î–æ–ª–≥ —Å–æ–∑–¥–∞–Ω! ID: {debt_id}")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–ª–≥–∞")
        else:
            st.warning("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def show_users(users: List[Dict], debts: List[Dict]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    if users:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –¥–æ–ª–∂–Ω–∏–∫–∞–º
            debtor_stats = {}
            
            for debt in debts:
                debtor_name = debt['debtor_name']
                if debtor_name not in debtor_stats:
                    debtor_stats[debtor_name] = {'count': 0, 'amount': 0}
                debtor_stats[debtor_name]['count'] += 1
                debtor_stats[debtor_name]['amount'] += debt['amount']
            
            if debtor_stats:
                for debtor, stats in debtor_stats.items():
                    st.write(f"**{debtor}**: {stats['count']} –¥–æ–ª–≥–æ–≤ –Ω–∞ —Å—É–º–º—É {stats['amount']:.2f} —Å–æ–º.")
            else:
                st.info("–ù–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        with col2:
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–ª–≥–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º
            creditor_stats = {}
            
            for debt in debts:
                creditor_name = debt['creditor_name']
                if creditor_name not in creditor_stats:
                    creditor_stats[creditor_name] = {'count': 0, 'amount': 0}
                creditor_stats[creditor_name]['count'] += 1
                creditor_stats[creditor_name]['amount'] += debt['amount']
            
            if creditor_stats:
                for creditor, stats in creditor_stats.items():
                    st.write(f"**{creditor}**: {stats['count']} –¥–æ–ª–≥–æ–≤ –Ω–∞ —Å—É–º–º—É {stats['amount']:.2f} —Å–æ–º.")
            else:
                st.info("–ù–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.subheader("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ expandable –±–ª–æ–∫–∞—Ö
        for user in users:
            display_name = user['first_name'] or user['username'] or f"User {user['user_id']}"
            
            with st.expander(f"üë§ {display_name} (@{user['username'] or '–Ω–µ—Ç username'})"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**User ID:** {user['user_id']}")
                    st.write(f"**Username:** @{user['username'] or '–Ω–µ—Ç'}")
                    st.write(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if user['is_active'] else '‚ùå'}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω:** {format_datetime(user['created_at'])}")
                    st.write(f"**–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:** {format_datetime(user['activated_at'])}")
                    # Toggle –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    active = st.toggle(
                        "–ê–∫—Ç–∏–≤–µ–Ω (–º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –¥–æ–ª–≥–∏)", 
                        value=bool(user['is_active']), 
                        key=f"toggle_active_{user['user_id']}"
                    )
                    if active != bool(user['is_active']):
                        db = get_async_db()
                        if await db.set_user_active(user['user_id'], int(active)):
                            st.success("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    if st.button(f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", key=f"delete_user_{user['user_id']}"):
                        db = get_async_db()
                        if await db.delete_user_cascade(user['user_id']):
                            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                with col2:
                    # –§–æ—Ä–º–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                    with st.form(f"rename_user_{user['user_id']}"):
                        st.write("**–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è:**")
                        new_first_name = st.text_input(
                            "–ò–º—è", 
                            value=user['first_name'] or '', 
                            key=f"first_name_{user['user_id']}"
                        )
                        new_last_name = st.text_input(
                            "–§–∞–º–∏–ª–∏—è", 
                            value=user['last_name'] or '', 
                            key=f"last_name_{user['user_id']}"
                        )
                        
                        if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            if new_first_name.strip():
                                db = get_async_db()
                                if await db.update_user_name(
                                    user['user_id'], 
                                    new_first_name.strip(), 
                                    new_last_name.strip() or None
                                ):
                                    st.success("–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                                    st.rerun()
                                else:
                                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")
                            else:
                                st.error("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    else:
        st.info("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def show_qr_codes(users: List[Dict]):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞–º–∏"""
    st.header("üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞–º–∏")
    
    db = get_async_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å QR-–∫–æ–¥–∞–º–∏
    users_with_qr = await db.get_users_with_qr_codes()
    
    if users_with_qr:
        st.subheader("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å QR-–∫–æ–¥–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å QR-–∫–æ–¥–∞–º–∏
        for user in users_with_qr:
            display_name = user['first_name'] or user['username'] or f"User {user['user_id']}"
            description = user['qr_code_description'] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            
            with st.expander(f"üì± {display_name} - {description}"):
                col1, col2, col3 = st.columns([2, 1, 1])
                
                with col1:
                    st.write(f"**User ID:** {user['user_id']}")
                    st.write(f"**Username:** @{user['username'] or '–Ω–µ—Ç'}")
                    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}")
                
                with col2:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR-–∫–æ–¥
                    st.subheader("üñºÔ∏è QR-–∫–æ–¥")
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                        bot_token = os.getenv('BOT_TOKEN')
                        if bot_token:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram
                            image = load_telegram_image(user['qr_code_file_id'], bot_token)
                            if image:
                                st.image(image, caption=f"QR-–∫–æ–¥ {display_name}", width=200)
                                st.success("‚úÖ QR-–∫–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Telegram")
                            else:
                                # Fallback –Ω–∞ placeholder
                                st.image(
                                    "https://via.placeholder.com/200x200/FFFFFF/000000?text=QR+Code",
                                    caption=f"QR-–∫–æ–¥ {display_name} (–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å)",
                                    width=200
                                )
                                st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QR-–∫–æ–¥ –∏–∑ Telegram")
                        else:
                            st.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QR-–∫–æ–¥–∞: {e}")
                
                with col3:
                    if st.button(f"–£–¥–∞–ª–∏—Ç—å QR-–∫–æ–¥", key=f"remove_qr_{user['user_id']}"):
                        if await db.remove_user_qr_code(user['user_id']):
                            st.success("QR-–∫–æ–¥ —É–¥–∞–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ QR-–∫–æ–¥–∞")
    else:
        st.info("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª QR-–∫–æ–¥—ã –±–∞–Ω–∫–æ–≤")
    
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ QR-–∫–æ–¥–∞—Ö")
    st.write("""
    **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç QR-–∫–æ–¥—ã –≤ LunchBOT:**
    
    1. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ QR-–∫–æ–¥–∞**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å QR-–∫–æ–¥ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    2. **–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ QR-–∫–æ–¥–∞**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π QR-–∫–æ–¥ —Å —Ñ–æ—Ç–æ
    3. **–û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤**: –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –¥–æ–ª–≥–∞ –¥–æ–ª–∂–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
    4. **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π QR-–∫–æ–¥
    5. **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ QR-–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** JPG, JPEG, PNG
    """)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å QR-–∫–æ–¥–∞–º–∏", len(users_with_qr))
    
    with col2:
        total_users = len(users)
        qr_coverage = (len(users_with_qr) / total_users * 100) if total_users > 0 else 0
        st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ QR-–∫–æ–¥–∞–º–∏", f"{qr_coverage:.1f}%")

async def show_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    db = get_async_db()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    st.subheader("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    current_frequency = int(await db.get_setting('reminder_frequency') or 1)
    current_time = await db.get_setting('reminder_time') or '17:30'
    
    with st.form("reminder_settings"):
        col1, col2 = st.columns(2)
        
        with col1:
            frequency_options = {
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å": 1,
                "–ö–∞–∂–¥—ã–µ 2 –¥–Ω—è": 2,
                "–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è": 3,
                "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": 7,
                "–ö–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏": 14
            }
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            current_option = None
            for option, value in frequency_options.items():
                if value == current_frequency:
                    current_option = option
                    break
            
            if not current_option:
                current_option = f"–ö–∞–∂–¥—ã–µ {current_frequency} –¥–Ω–µ–π"
                frequency_options[current_option] = current_frequency
            
            selected_frequency = st.selectbox(
                "–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–æ–ª–≥–∞—Ö",
                list(frequency_options.keys()),
                index=list(frequency_options.keys()).index(current_option)
            )
        
        with col2:
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                time_obj = datetime.strptime(current_time, '%H:%M').time()
            except ValueError:
                time_obj = datetime.strptime('17:30', '%H:%M').time()
            
            reminder_time = st.time_input(
                "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                value=time_obj
            )
        
        if st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            new_frequency = frequency_options[selected_frequency]
            new_time = reminder_time.strftime('%H:%M')
            
            success = True
            if not await db.set_setting('reminder_frequency', str(new_frequency)):
                success = False
            if not await db.set_setting('reminder_time', new_time):
                success = False
            
            if success:
                st.success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {selected_frequency} –≤ {new_time}")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
    st.subheader("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    
    admin_chat_id = await db.get_setting('admin_chat_id') or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info(f"**ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:** {admin_chat_id}")
    
    with col2:
        st.info("**–¢–æ–∫–µ–Ω –±–æ—Ç–∞:** –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ .env")
    
    st.warning("‚ÑπÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –∞–¥–º–∏–Ω ID –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É.")
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞
    st.subheader("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É")
    
    bot_url = "https://t.me/MealLunchBot"
    
    st.info(f"**–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞:** {bot_url}")
    st.write("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–∞—Ç–∏–∏ /start "
             "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—Å—è –∫ –±–æ—Ç—É.")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    st.code(bot_url, language="text")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users, debts = await get_db_data()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", len(users))
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–≥–∏", len(debts))
    
    with col3:
        st.metric("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ë–î", "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞")

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
if __name__ == "__main__":
    asyncio.run(main()) 