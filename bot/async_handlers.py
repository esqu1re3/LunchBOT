import logging
import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from .async_db import AsyncDatabaseManager
from .async_keyboards import (
    get_main_menu_keyboard, get_users_keyboard, get_debt_actions_keyboard,
    get_payment_confirmation_keyboard, get_cancel_keyboard,
    get_back_to_main_keyboard, get_debts_payment_keyboard, get_receipt_upload_keyboard
)
from .async_messages import (
    format_debt_list, format_datetime, debt_created_message,
    payment_confirmed_message, debt_reminder_message, new_debt_message, error_message
)

router = Router()
logger = logging.getLogger(__name__)
db = AsyncDatabaseManager()

def is_valid_file_format(file_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–º
    
    Args:
        file_name: –ò–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ø—É—Å—Ç–∏–º
    """
    if not file_name:
        return False
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    file_name = file_name.lower().strip()
    
    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    valid_extensions = ['.jpg', '.jpeg', '.png', '.pdf']
    
    return any(file_name.endswith(ext) for ext in valid_extensions)

async def cleanup_messages(bot, chat_id: int, message_ids: list):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not message_ids:
        return
    
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
    
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await bot.edit_message_text(
                    "üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ",
                    chat_id=chat_id,
                    message_id=msg_id
                )
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as edit_error:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {edit_error}")
    
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def safe_edit_message(message, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞)
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        reply_markup: –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ caption (–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ) –∏–ª–∏ text (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if message.caption:
            await message.edit_caption(text, reply_markup=reply_markup)
        else:
            await message.edit_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.answer(text, reply_markup=reply_markup)
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_error}")

def is_duplicate_action(user_id: int, action: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–º
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ
    """
    import time
    current_time = time.time()
    key = f"{user_id}:{action}"
    
    if key in user_action_cache:
        last_time = user_action_cache[key]
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã, —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if current_time - last_time < 1:
            return True
    
    user_action_cache[key] = current_time
    return False

# === –°–û–°–¢–û–Ø–ù–ò–Ø FSM ===

class CreateDebtStates(StatesGroup):
    selecting_debtor = State()
    entering_amount = State()
    entering_description = State()
    uploading_receipt = State()

class PayDebtStates(StatesGroup):
    uploading_receipt = State()

class CancelPaymentStates(StatesGroup):
    entering_cancel_reason = State()

# –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
user_action_cache = {}

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.create_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        welcome_text = "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ LunchBOT!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LunchBOT!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = await get_main_menu_keyboard()
    await message.answer(welcome_text, reply_markup=keyboard)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üçΩÔ∏è LunchBOT - —Å–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –¥–æ–ª–≥–æ–≤ –∑–∞ –æ–±–µ–¥

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/new_debt - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥
/my_debts - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ–ª–≥–∏
/who_owes_me - –ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º

üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_debt
üí° –î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—á–µ–Ω–æ" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
"""
    keyboard = await get_main_menu_keyboard()
    await message.answer(help_text, reply_markup=keyboard)

@router.message(Command("new_debt"))
async def cmd_new_debt(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞"""
    users = await db.get_all_users()
    users = [u for u in users if u['user_id'] != message.from_user.id and u['is_active']]
    
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.clear()
    await state.update_data(message_ids=[message.message_id])
    
    keyboard = await get_users_keyboard(users, exclude_user_id=message.from_user.id)
    select_msg = await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–∏–∫–∞:", reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    data = await state.get_data()
    data['message_ids'].append(select_msg.message_id)
    await state.update_data(message_ids=data['message_ids'])
    
    await state.set_state(CreateDebtStates.selecting_debtor)

@router.message(Command("my_debts"))
async def cmd_my_debts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    debts = await db.get_user_debts(message.from_user.id)
    
    if not debts:
        keyboard = await get_main_menu_keyboard()
        await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!", reply_markup=keyboard)
        return
    
    total = sum(d['amount'] for d in debts)
    debt_list = format_debt_list(debts)
    
    response = f"üìã –í–∞—à–∏ –¥–æ–ª–≥–∏ ({len(debts)}):\n\n{debt_list}\n\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} —Å–æ–º\n\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Å–µ —Å—Ä–∞–∑—É:"
    keyboard = await get_debts_payment_keyboard(debts)
    await message.answer(response, reply_markup=keyboard)

@router.message(Command("who_owes_me"))
async def cmd_who_owes_me(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    debts = await db.get_open_debts()
    my_debts = [d for d in debts if d['creditor_id'] == message.from_user.id]
    
    if not my_debts:
        keyboard = await get_main_menu_keyboard()
        await message.answer("‚úÖ –í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω!", reply_markup=keyboard)
        return
    
    total = sum(d['amount'] for d in my_debts)
    debt_list = format_debt_list(my_debts)
    
    response = f"üìã –ö—Ç–æ –≤–∞–º –¥–æ–ª–∂–µ–Ω ({len(my_debts)}):\n\n{debt_list}\n\nüí∞ –ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {total:.2f} —Å–æ–º"
    keyboard = await get_main_menu_keyboard()
    await message.answer(response, reply_markup=keyboard)

# === CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@router.callback_query(F.data == "cancel")
async def handle_cancel(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    if current_state == CancelPaymentStates.entering_cancel_reason.__str__():
        await call.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        return
    
    # –û–±—ã—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(call.message.message_id)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    if message_ids:
        await cleanup_messages(call.bot, call.message.chat.id, message_ids)
    
    await state.clear()
    keyboard = await get_main_menu_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await call.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data == "skip_receipt")
async def handle_skip_receipt(call: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–∞ –±–µ–∑ —á–µ–∫–∞"""
    await call.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_ids.append(call.message.message_id)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ create_debt_final
    class FakeMessage:
        def __init__(self, bot, from_user, chat):
            self.bot = bot
            self.from_user = from_user
            self.chat = chat
        
        async def answer(self, text, reply_markup=None):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
            return await self.bot.send_message(self.chat.id, text, reply_markup=reply_markup)
    
    fake_message = FakeMessage(call.bot, call.from_user, call.message.chat)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –¥–æ–ª–≥
    await state.update_data(message_ids=message_ids)
    await create_debt_final(fake_message, state)

@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    keyboard = await get_main_menu_keyboard()
    
    await safe_edit_message(call.message, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await call.answer()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö –ö–û–ú–ê–ù–î ===

@router.callback_query(F.data == "cmd_new_debt")
async def handle_cmd_new_debt(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –¥–æ–ª–≥'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_duplicate_action(call.from_user.id, "cmd_new_debt"):
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    await call.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞
    users = await db.get_all_users()
    users = [u for u in users if u['user_id'] != call.from_user.id and u['is_active']]
    
    if not users:
        await safe_edit_message(call.message, "‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.clear()
    await state.update_data(message_ids=[call.message.message_id])
    
    keyboard = await get_users_keyboard(users, exclude_user_id=call.from_user.id)
    await safe_edit_message(call.message, "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–∏–∫–∞:", reply_markup=keyboard)
    await state.set_state(CreateDebtStates.selecting_debtor)

@router.callback_query(F.data == "cmd_my_debts")
async def handle_cmd_my_debts(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –¥–æ–ª–≥–∏'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_duplicate_action(call.from_user.id, "cmd_my_debts"):
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    await call.answer()
    
    debts = await db.get_user_debts(call.from_user.id)
    
    if not debts:
        keyboard = await get_main_menu_keyboard()
        await safe_edit_message(call.message, "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!", reply_markup=keyboard)
        return
    
    total = sum(d['amount'] for d in debts)
    debt_list = format_debt_list(debts)
    
    response = f"üìã –í–∞—à–∏ –¥–æ–ª–≥–∏ ({len(debts)}):\n\n{debt_list}\n\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} —Å–æ–º\n\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤—Å–µ —Å—Ä–∞–∑—É:"
    keyboard = await get_debts_payment_keyboard(debts)
    
    await safe_edit_message(call.message, response, reply_markup=keyboard)

@router.callback_query(F.data == "cmd_who_owes_me")
async def handle_cmd_who_owes_me(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö—Ç–æ –º–Ω–µ –¥–æ–ª–∂–µ–Ω'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_duplicate_action(call.from_user.id, "cmd_who_owes_me"):
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    await call.answer()
    
    debts = await db.get_open_debts()
    my_debts = [d for d in debts if d['creditor_id'] == call.from_user.id]
    
    if not my_debts:
        keyboard = await get_main_menu_keyboard()
        await safe_edit_message(call.message, "‚úÖ –í–∞–º –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ–ª–∂–µ–Ω!", reply_markup=keyboard)
        return
    
    total = sum(d['amount'] for d in my_debts)
    debt_list = format_debt_list(my_debts)
    
    response = f"üìã –ö—Ç–æ –≤–∞–º –¥–æ–ª–∂–µ–Ω ({len(my_debts)}):\n\n{debt_list}\n\nüí∞ –ò—Ç–æ–≥–æ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {total:.2f} —Å–æ–º"
    keyboard = await get_main_menu_keyboard()
    
    await safe_edit_message(call.message, response, reply_markup=keyboard)

@router.callback_query(F.data == "cmd_help")
async def handle_cmd_help(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if is_duplicate_action(call.from_user.id, "cmd_help"):
        await call.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    
    await call.answer()
    
    help_text = """
üçΩÔ∏è LunchBOT - —Å–∏—Å—Ç–µ–º–∞ —É—á—ë—Ç–∞ –¥–æ–ª–≥–æ–≤ –∑–∞ –æ–±–µ–¥

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/new_debt - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–ª–≥
/my_debts - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–æ–ª–≥–∏
/who_owes_me - –ö—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∞–º

üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_debt
üí° –î–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí≥ –û–ø–ª–∞—á–µ–Ω–æ" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
"""
    keyboard = await get_main_menu_keyboard()
    
    await safe_edit_message(call.message, help_text, reply_markup=keyboard)

# === –°–û–ó–î–ê–ù–ò–ï –î–û–õ–ì–ê ===

@router.callback_query(F.data.startswith("select_user_"))
async def handle_user_selection(call: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–∏–∫–∞"""
    user_id = int(call.data.split("_")[2])
    user = await db.get_user(user_id)
    
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(debtor_id=user_id, debtor_name=user['first_name'] or user['username'])
    await safe_edit_message(call.message, f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–∞ –¥–ª—è {user['first_name'] or user['username']}:")
    await state.set_state(CreateDebtStates.entering_amount)
    await call.answer()

@router.message(StateFilter(CreateDebtStates.entering_amount))
async def handle_amount_input(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Å—É–º–º—ã –¥–æ–ª–≥–∞"""
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = await state.get_data()
        data['message_ids'].append(message.message_id)
        data['amount'] = amount
        await state.update_data(**data)
        
        keyboard = await get_cancel_keyboard()
        desc_msg = await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):", reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        data = await state.get_data()
        data['message_ids'].append(desc_msg.message_id)
        await state.update_data(message_ids=data['message_ids'])
        
        await state.set_state(CreateDebtStates.entering_description)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.50)")

@router.message(StateFilter(CreateDebtStates.entering_description))
async def handle_description_input(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–≥–∞"""
    description = message.text if message.text != '-' else None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    data['message_ids'].append(message.message_id)
    data['description'] = description
    await state.update_data(**data)
    
    keyboard = await get_receipt_upload_keyboard()
    receipt_msg = await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ–∫–∞:\n\n"
        "‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    data = await state.get_data()
    data['message_ids'].append(receipt_msg.message_id)
    await state.update_data(message_ids=data['message_ids'])
    
    await state.set_state(CreateDebtStates.uploading_receipt)

@router.message(StateFilter(CreateDebtStates.uploading_receipt), F.photo)
async def handle_receipt_upload(message: Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ (—Ñ–æ—Ç–æ)"""
    file_id = message.photo[-1].file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    data['message_ids'].append(message.message_id)
    data['file_id'] = file_id
    await state.update_data(**data)
    
    await create_debt_final(message, state)

@router.message(StateFilter(CreateDebtStates.uploading_receipt), F.document)
async def handle_receipt_document(message: Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ (–¥–æ–∫—É–º–µ–Ω—Ç)"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not is_valid_file_format(document.file_name):
        data = await state.get_data()
        message_ids = data.get('message_ids', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids.append(message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        error_msg = await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids.append(error_msg.message_id)
        await state.update_data(message_ids=message_ids)
        return
    
    file_id = document.file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    data['message_ids'].append(message.message_id)
    data['file_id'] = file_id
    await state.update_data(**data)
    
    await create_debt_final(message, state)

@router.message(StateFilter(CreateDebtStates.uploading_receipt))
async def handle_no_receipt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞"""
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(message.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—å–±—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    prompt_msg = await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ–∫–∞!\n\n"
        "‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —á–µ–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –Ω–∏–∂–µ."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(prompt_msg.message_id)
    await state.update_data(message_ids=message_ids)

async def create_debt_final(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–∞"""
    data = await state.get_data()
    
    debtor_id = data['debtor_id']
    amount = data['amount']
    description = data.get('description')
    file_id = data.get('file_id')
    message_ids = data.get('message_ids', [])
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ª–≥
    debt_id = await db.create_debt(
        debtor_id=debtor_id,
        creditor_id=message.from_user.id,
        amount=amount,
        description=description
    )
    
    if not debt_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞")
        await state.clear()
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–∫, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if file_id:
        payment_id = await db.create_payment(
            debt_id=debt_id,
            debtor_id=debtor_id,
            creditor_id=message.from_user.id,
            file_id=file_id
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É
    debtor = await db.get_user(debtor_id)
    creditor_name = message.from_user.first_name or message.from_user.username
    
    new_debt_text = new_debt_message(
        creditor_name=creditor_name,
        amount=amount,
        description=description or "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        created_at=format_datetime(datetime.now().isoformat())
    )
    
    keyboard = await get_debt_actions_keyboard(debt_id)
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        if file_id:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
            if message.photo:
                # –≠—Ç–æ —Ñ–æ—Ç–æ
                await message.bot.send_photo(
                    chat_id=debtor_id,
                    photo=file_id,
                    caption=new_debt_text,
                    reply_markup=keyboard
                )
            elif message.document:
                # –≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
                await message.bot.send_document(
                    chat_id=debtor_id,
                    document=file_id,
                    caption=new_debt_text,
                    reply_markup=keyboard
                )
        else:
            # –ë–µ–∑ —á–µ–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.bot.send_message(debtor_id, new_debt_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É {debtor_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞
    if message_ids:
        await cleanup_messages(message.bot, message.chat.id, message_ids)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É
    success_text = debt_created_message(
        debtor_name=debtor['first_name'] or debtor['username'],
        amount=amount,
        description=description or "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è",
        date=format_datetime(datetime.now().isoformat())
    )
    
    keyboard = await get_main_menu_keyboard()
    await message.answer(success_text, reply_markup=keyboard)
    await state.clear()

# === –û–ü–õ–ê–¢–ê –î–û–õ–ì–û–í ===

@router.callback_query(F.data.startswith("pay_debt_"))
async def handle_pay_debt(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞"""
    debt_id = int(call.data.split("_")[2])
    debt = await db.get_debt(debt_id)
    
    if not debt or debt['debtor_id'] != call.from_user.id:
        await call.answer("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π
    await state.clear()
    await state.update_data(debt_id=debt_id, message_ids=[call.message.message_id])
    
    keyboard = await get_cancel_keyboard()
    await safe_edit_message(
        call.message,
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ:\n\n"
        "‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF",
        keyboard
    )
    await state.set_state(PayDebtStates.uploading_receipt)
    await call.answer()

@router.callback_query(F.data == "pay_all_debts")
async def handle_pay_all_debts(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤ —Å—Ä–∞–∑—É"""
    await call.answer()
    
    debts = await db.get_user_debts(call.from_user.id)
    
    if not debts:
        keyboard = await get_main_menu_keyboard()
        await safe_edit_message(call.message, "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–ª–≥–æ–≤!", keyboard)
        return
    
    total_amount = sum(d['amount'] for d in debts)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.update_data(
        debt_ids=[d['id'] for d in debts],
        creditor_ids=list(set(d['creditor_id'] for d in debts)),
        total_amount=total_amount,
        message_ids=[call.message.message_id]
    )
    
    keyboard = await get_cancel_keyboard()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤
    creditors_info = []
    for debt in debts:
        creditor_name = debt['creditor_name'] or debt['creditor_username'] or f"User {debt['creditor_id']}"
        creditors_info.append(f"‚Ä¢ {creditor_name}: {debt['amount']:.2f} —Å–æ–º")
    
    creditors_text = "\n".join(creditors_info)
    
    await safe_edit_message(
        call.message,
        f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤\n\n"
        f"‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} —Å–æ–º\n\n"
        f"üìã –°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–≤:\n{creditors_text}",
        keyboard
    )
    await state.set_state(PayDebtStates.uploading_receipt)

@router.message(StateFilter(PayDebtStates.uploading_receipt), F.photo)
async def handle_payment_receipt_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (—Ñ–æ—Ç–æ)"""
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    file_id = message.photo[-1].file_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(message.message_id)
    await state.update_data(message_ids=message_ids)
    
    await process_payment_receipt(message, state, file_id)

@router.message(StateFilter(PayDebtStates.uploading_receipt), F.document)
async def handle_payment_receipt_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (–¥–æ–∫—É–º–µ–Ω—Ç)"""
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not is_valid_file_format(document.file_name):
        data = await state.get_data()
        message_ids = data.get('message_ids', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids.append(message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        error_msg = await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        message_ids.append(error_msg.message_id)
        await state.update_data(message_ids=message_ids)
        return
    
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    file_id = document.file_id
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(message.message_id)
    await state.update_data(message_ids=message_ids)
    
    await process_payment_receipt(message, state, file_id)

async def process_payment_receipt(message: Message, state: FSMContext, file_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞)"""
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –∏–ª–∏ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤
    if 'debt_id' in data:
        # –û–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–ª–≥–∞
        debt_id = data['debt_id']
        debt = await db.get_debt(debt_id)
        
        if not debt:
            await message.answer("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_id = await db.create_payment(
            debt_id=debt_id,
            debtor_id=message.from_user.id,
            creditor_id=debt['creditor_id'],
            file_id=file_id
        )
        
        if not payment_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ—Ä—É
        debtor_name = message.from_user.first_name or message.from_user.username
        
        confirmation_text = f"""
üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã

–î–æ–ª–∂–Ω–∏–∫: {debtor_name}
–°—É–º–º–∞: {debt['amount']:.2f} —Å–æ–º
–û–ø–∏—Å–∞–Ω–∏–µ: {debt['description'] or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
"""
        
        keyboard = await get_payment_confirmation_keyboard(payment_id)
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
            if message.photo:
                # –≠—Ç–æ —Ñ–æ—Ç–æ
                await message.bot.send_photo(
                    chat_id=debt['creditor_id'],
                    photo=file_id,
                    caption=confirmation_text,
                    reply_markup=keyboard
                )
            elif message.document:
                # –≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
                await message.bot.send_document(
                    chat_id=debt['creditor_id'],
                    document=file_id,
                    caption=confirmation_text,
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä—É {debt['creditor_id']}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
        if message_ids:
            await cleanup_messages(message.bot, message.chat.id, message_ids)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ
        notification_msg = await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—Ä–µ–¥–∏—Ç–æ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        try:
            await message.bot.delete_message(message.chat.id, notification_msg.message_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as delete_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞: {delete_error}")
        
        await state.clear()
        
    elif 'debt_ids' in data:
        # –û–ø–ª–∞—Ç–∞ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤
        debt_ids = data['debt_ids']
        creditor_ids = data['creditor_ids']
        total_amount = data['total_amount']
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–ª–≥–∞
        created_payments = []
        debtor_name = message.from_user.first_name or message.from_user.username
        
        for debt_id in debt_ids:
            debt = await db.get_debt(debt_id)
            if debt:
                payment_id = await db.create_payment(
                    debt_id=debt_id,
                    debtor_id=message.from_user.id,
                    creditor_id=debt['creditor_id'],
                    file_id=file_id
                )
                if payment_id:
                    created_payments.append((payment_id, debt))
        
        if not created_payments:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π")
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ–º –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º
        for payment_id, debt in created_payments:
            creditor_name = debt['creditor_name'] or debt['creditor_username'] or f"User {debt['creditor_id']}"
            
            confirmation_text = f"""
üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã (—á–∞—Å—Ç—å –æ–±—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)

–î–æ–ª–∂–Ω–∏–∫: {debtor_name}
–°—É–º–º–∞: {debt['amount']:.2f} —Å–æ–º
–û–ø–∏—Å–∞–Ω–∏–µ: {debt['description'] or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
–û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤: {total_amount:.2f} —Å–æ–º

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.
"""
            
            keyboard = await get_payment_confirmation_keyboard(payment_id)
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–æ–º
                if message.photo:
                    # –≠—Ç–æ —Ñ–æ—Ç–æ
                    await message.bot.send_photo(
                        chat_id=debt['creditor_id'],
                        photo=file_id,
                        caption=confirmation_text,
                        reply_markup=keyboard
                    )
                elif message.document:
                    # –≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
                    await message.bot.send_document(
                        chat_id=debt['creditor_id'],
                        document=file_id,
                        caption=confirmation_text,
                        reply_markup=keyboard
                    )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä—É {debt['creditor_id']}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
        if message_ids:
            await cleanup_messages(message.bot, message.chat.id, message_ids)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ
        notification_msg = await message.answer(f"‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {len(created_payments)} –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞–º –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        try:
            await message.bot.delete_message(message.chat.id, notification_msg.message_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as delete_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–æ–≤: {delete_error}")
        
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")
        await state.clear()

@router.message(StateFilter(PayDebtStates.uploading_receipt))
async def handle_payment_no_receipt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(message.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—å–±—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    prompt_msg = await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ\n\n"
        "‚úÖ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, PDF"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message_ids.append(prompt_msg.message_id)
    await state.update_data(message_ids=message_ids)

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ï–ô ===

@router.callback_query(F.data.startswith("confirm_payment_"))
async def handle_confirm_payment(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = int(call.data.split("_")[2])
    payment = await db.get_payment(payment_id)
    
    if not payment or payment['creditor_id'] != call.from_user.id:
        await call.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    success = await db.confirm_payment(payment_id)
    if not success:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–æ–ª–≥
    await db.close_debt(payment['debt_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–ª–≥–µ –¥–ª—è —Å—É–º–º—ã
    debt = await db.get_debt(payment['debt_id'])
    if not debt:
        await call.answer("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞ –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    debtor_name = call.from_user.first_name or call.from_user.username
    confirmation_text = payment_confirmed_message(debt['amount'])
    
    try:
        notification_msg = await call.bot.send_message(payment['debtor_id'], confirmation_text)
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        try:
            await call.bot.delete_message(payment['debtor_id'], notification_msg.message_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É {payment['debtor_id']} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as delete_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É: {delete_error}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∏–∫—É {payment['debtor_id']}: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç)
    try:
        await call.message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {payment_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ caption (–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ text (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if call.message.caption:
                await call.message.edit_caption("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç.")
            else:
                await safe_edit_message(call.message, "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –î–æ–ª–≥ –∑–∞–∫—Ä—ã—Ç.")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {payment_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await call.message.edit_reply_markup(reply_markup=None)
                logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {payment_id}")
            except Exception as markup_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {markup_error}")
    
    await call.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

@router.callback_query(F.data.startswith("cancel_payment_"))
async def handle_cancel_payment(call: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ - –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã"""
    payment_id = int(call.data.split("_")[2])
    payment = await db.get_payment(payment_id)
    
    if not payment or payment['creditor_id'] != call.from_user.id:
        await call.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
    await state.clear()
    await state.update_data(payment_id=payment_id, message_ids=[call.message.message_id])
    await state.set_state(CancelPaymentStates.entering_cancel_reason)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    prompt_msg = await call.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞:")
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    data = await state.get_data()
    data['message_ids'].append(prompt_msg.message_id)
    await state.update_data(**data)
    
    await call.answer()

@router.message(StateFilter(CancelPaymentStates.entering_cancel_reason))
async def handle_cancel_reason_input(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    reason = message.text.strip()
    
    if not reason:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_id = data.get('payment_id')
    message_ids = data.get('message_ids', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    payment = await db.get_payment(payment_id)
    if not payment:
        await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_ids.append(message.message_id)
    await state.update_data(message_ids=message_ids)
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    success = await db.cancel_payment(payment_id, reason)
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
        await state.clear()
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–æ–ª–∂–Ω–∏–∫–∞
    creditor_name = message.from_user.first_name or message.from_user.username or f"User {message.from_user.id}"
    cancellation_text = f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∫—Ä–µ–¥–∏—Ç–æ—Ä–æ–º {creditor_name}\n\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\nüí° –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤—ã–π —á–µ–∫."
    
    try:
        notification_msg = await message.bot.send_message(payment['debtor_id'], cancellation_text)
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        try:
            await message.bot.delete_message(payment['debtor_id'], notification_msg.message_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∏–∫—É {payment['debtor_id']} —É–¥–∞–ª–µ–Ω–æ")
        except Exception as delete_error:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∏–∫—É: {delete_error}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∏–∫—É {payment['debtor_id']}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞
    try:
        await cleanup_messages(message.bot, message.chat.id, message_ids)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞ {message.chat.id} –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞")
    except Exception as cleanup_error:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫—Ä–µ–¥–∏—Ç–æ—Ä–∞: {cleanup_error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    confirmation_msg = await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω! –î–æ–ª–≥ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.")
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)
    try:
        await message.bot.delete_message(message.chat.id, confirmation_msg.message_id)
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as delete_error:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã: {delete_error}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===

@router.callback_query(F.data.startswith("remind_later_"))
async def handle_remind_later(call: CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    debt_id = int(call.data.split("_")[2])
    debt = await db.get_debt(debt_id)
    
    if not debt or debt['debtor_id'] != call.from_user.id:
        await call.answer("‚ùå –î–æ–ª–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await db.update_reminder_sent(debt_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
    try:
        await call.message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º {debt_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ caption (–¥–æ–∫—É–º–µ–Ω—Ç/—Ñ–æ—Ç–æ) –∏–ª–∏ text (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if call.message.caption:
                await call.message.edit_caption("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 24 —á–∞—Å–∞")
            else:
                await safe_edit_message(call.message, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ 24 —á–∞—Å–∞")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º {debt_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as edit_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            try:
                await call.message.edit_reply_markup(reply_markup=None)
                logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {debt_id}")
            except Exception as markup_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {markup_error}")
    
    await call.answer("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ")

# === –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ===

@router.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞/–æ–ø–ª–∞—Ç—ã)"""
    await message.answer("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ª–≥–∞ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã.")

@router.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===

@router.message()
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = await get_main_menu_keyboard()
    await message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=keyboard) 