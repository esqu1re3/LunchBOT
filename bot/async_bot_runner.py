"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
"""
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from .async_db import AsyncDatabaseManager
from .async_handlers import router
from .async_scheduler import AsyncScheduler

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = AsyncDatabaseManager()
        await db.init_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=API_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        dp.include_router(router)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = AsyncScheduler(db, bot)
        await scheduler.setup_reminder_scheduler()
        await scheduler.setup_cleanup_scheduler()
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π LunchBOT –∑–∞–ø—É—â–µ–Ω!")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π polling –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        while True:
            try:
                await dp.start_polling(bot, skip_updates=True, polling_timeout=1)
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if 'scheduler' in locals():
            scheduler.stop()
        if 'bot' in locals():
            await bot.session.close()

def run_bot_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    run_bot_sync() 